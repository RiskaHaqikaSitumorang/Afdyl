// lib/services/surat_activity_service.dart
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/surat_activity_model.dart';

class SuratActivityService {
  static final _supabase = Supabase.instance.client;

  /// Record activity ketika user membaca minimal 5 ayat dalam suatu surat
  /// - First time: Insert new record dengan count = null
  /// - Subsequent times (different sessions): Increment count field
  static Future<bool> recordSuratActivity(
    int suratNumber, {
    String? sessionId,
  }) async {
    try {
      print('[SuratActivity] üìù Recording activity for Surat $suratNumber');

      final user = _supabase.auth.currentUser;
      if (user == null) {
        print('[SuratActivity] ‚ö†Ô∏è No user logged in, skipping');
        return false;
      }

      // Check if activity record exists for this surat (any date)
      final existing =
          await _supabase
              .from('surat_activity')
              .select()
              .eq('user_id', user.id)
              .eq('surat_number', suratNumber)
              .maybeSingle();

      if (existing != null) {
        // Record exists - increment count
        final currentCount = existing['count'] as int? ?? 1;
        final newCount = currentCount + 1;

        print('[SuratActivity] üîÑ Updating count: $currentCount ‚Üí $newCount');

        await _supabase
            .from('surat_activity')
            .update({
              'count': newCount,
              'timestamp': DateTime.now().toIso8601String().split('T')[0],
            })
            .eq('id', existing['id']);

        print('[SuratActivity] ‚úÖ Count updated to $newCount');
        return true;
      } else {
        // First time reading this surat - insert new record
        print('[SuratActivity] üÜï First time reading this surat');

        final activity = SuratActivity(
          id: '', // Will be generated by DB
          userId: user.id,
          suratNumber: suratNumber,
          timestamp: DateTime.now(),
          count: null, // null indicates first read
        );

        await _supabase.from('surat_activity').insert(activity.toJson());

        print('[SuratActivity] ‚úÖ New activity recorded');
        return true;
      }
    } catch (e, stack) {
      print('[SuratActivity] ‚ùå Error recording activity: $e');
      print('[SuratActivity] Stack: $stack');
      return false;
    }
  }

  /// Get total days user has read Quran (unique dates)
  static Future<int> getTotalReadingDays() async {
    try {
      final user = _supabase.auth.currentUser;
      if (user == null) return 0;

      final response =
          await _supabase
                  .from('surat_activity')
                  .select('timestamp')
                  .eq('user_id', user.id)
              as List<dynamic>;

      if (response.isEmpty) return 0;

      // Count unique dates
      final uniqueDates = <String>{};
      for (final row in response) {
        uniqueDates.add(row['timestamp'] as String);
      }

      return uniqueDates.length;
    } catch (e) {
      print('[SuratActivity] ‚ùå Error getting total days: $e');
      return 0;
    }
  }

  /// Get total surat that has been read
  static Future<int> getTotalSuratRead() async {
    try {
      final user = _supabase.auth.currentUser;
      if (user == null) return 0;

      final response =
          await _supabase
                  .from('surat_activity')
                  .select('surat_number')
                  .eq('user_id', user.id)
              as List<dynamic>;

      if (response.isEmpty) return 0;

      // Count unique surat numbers
      final uniqueSurat = <int>{};
      for (final row in response) {
        uniqueSurat.add(row['surat_number'] as int);
      }

      return uniqueSurat.length;
    } catch (e) {
      print('[SuratActivity] ‚ùå Error getting total surat: $e');
      return 0;
    }
  }

  /// Get reading streak (consecutive days)
  static Future<int> getReadingStreak() async {
    try {
      final user = _supabase.auth.currentUser;
      if (user == null) return 0;

      final response =
          await _supabase
                  .from('surat_activity')
                  .select('timestamp')
                  .eq('user_id', user.id)
                  .order('timestamp', ascending: false)
              as List<dynamic>;

      if (response.isEmpty) return 0;

      final dates = <DateTime>{};
      for (final row in response) {
        dates.add(DateTime.parse(row['timestamp'] as String));
      }

      final sortedDates = dates.toList()..sort((a, b) => b.compareTo(a));

      int streak = 0;
      DateTime? previousDate;

      for (final date in sortedDates) {
        if (previousDate == null) {
          // First date
          final today = DateTime.now();
          final difference = today.difference(date).inDays;

          if (difference > 1) {
            // Gap more than 1 day, streak broken
            break;
          }
          streak = 1;
          previousDate = date;
        } else {
          // Check if consecutive
          final difference = previousDate.difference(date).inDays;
          if (difference == 1) {
            streak++;
            previousDate = date;
          } else {
            // Gap found, break
            break;
          }
        }
      }

      return streak;
    } catch (e) {
      print('[SuratActivity] ‚ùå Error getting streak: $e');
      return 0;
    }
  }

  /// Check if user has read today
  static Future<bool> hasReadToday() async {
    try {
      final user = _supabase.auth.currentUser;
      if (user == null) return false;

      final today = DateTime.now().toIso8601String().split('T')[0];

      final response =
          await _supabase
              .from('surat_activity')
              .select()
              .eq('user_id', user.id)
              .eq('timestamp', today)
              .maybeSingle();

      return response != null;
    } catch (e) {
      print('[SuratActivity] ‚ùå Error checking today: $e');
      return false;
    }
  }
}
